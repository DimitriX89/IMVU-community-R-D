	In the recent times, products with blended (partial) transparency are becoming more and more popular, so the demand for blending - compatible meshes had increase. However, blended transparency is prone to glitching if one surface with blending is viewed through another. In the following text, I will attempt to systematize what is known about its behavior.
	In real time 3d rendering engines like one used by IMVU, sorting of objects by relative distance to camera is quite computationally expensive. Thats why graphic engines often resort to hacks, such as using pre-determined drawing order based on arbitrary factors, rather than dynamically calculate it. While most of the time such workaround is sufficient, in case of partial transparency it can lead to draw order conflicts. When the transparent surface with lower index in draw queue is closer to camera than another with higher index, the parts of the second surface occluded by the first will be discarded, leading to "clipping".
	There is no error-prone solution to this issue, but constructing the mesh with "preferred viewing direction" in mind will help minimise glitches. To do this, we need to understand how IMVU determines draw order. As far as I know, it is based on mesh subobject indices => material indices => mesh slot indices in the product => object order in the scene. Each following category overrides the previous one. I am providing an analysis of their interaction in "draw order.png" file, as well as the example *.chkn file ("blending guide.chkn") to go with it.
	In order for transparency to behave properly, the farther the surface is from the camera, the lower draw queue index it should have. We have several ways to influence it. 
	1) mesh subobject order can be manipulated by detaching the parts of the mesh (in case of a furry tail accessory, it will be conical segments representing the fur) to individual objects, then reattaching them together in order our indices must flow (in the tail example, moving from base segment to the tip).
	2) Material index is literally the material's slot number in IMVU (which you type in the square brackets when you assign a material name inside of your 3d editor of choice, like "fur [2]").
	3) Likewise, the mesh index in the product is the mesh slot number in IMVU create mode. Try to swap *.xmf-s between their respective mesh slots in IMVU project I've provided and observe the effect on clipping.
	4) Order of object in the scene is something that we cannot manipulate. Since the characters and furniture objects in IMVU scene are all attached to room object, the room will always precede other objects in render queue. As a result, semi-transparent surfaces in the room product will invariantly clip the blended materials on avatars. The best we can do is to avoid blended transparency while creating rooms, or at least place the blended surfaces the way the avatars can not be seen through them.
	5)Particle effects are either automatically placed after other objects in queue, or just assigned very high index. They will be clipped by any mesh objects in blending. This can lead to interesting exploits, like "stopping" the particle emission on command by occluding the emitter by transparent cube (which, in turn, is turned on/off by morph animation triggers).
	In the end, though the issues with blended transparency can be minimized, it still remains problematic, and you have to be prepared for draw order conflicts if you plan to use it.  